{"version":3,"file":"static/js/927.e3648533.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterValue = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"container\":\"ContactForm_container__qpJ1N\",\"formImput\":\"ContactForm_formImput__DpgxD\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid'; \nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n  \nexport const ContactForm = () => {\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n\n const handleFormSubmit = event => {\n    event.preventDefault();\n    let nameAlreadyOnList = false;\n    const form = event.target;\n \n    const number = event.target.number.value; \n    const name = event.target.name.value;\n    const toLowerCase = name.toLowerCase();\n    const newContact = ({ \n     id: nanoid(), \n      name:name, \n      number: number });\n\n      contacts.forEach(({ name }) => {\n        if (name.toLowerCase() === toLowerCase) {\n          alert(`${name} is currently in contacts`);\n          nameAlreadyOnList = true;\n          form.reset();\n        }\n      });\n\n      if (nameAlreadyOnList) return;\n \n      dispatch(addNewContact(newContact));\n\n      form.reset();\n  };\n \n    return (\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <h1>Phonebook</h1>\n        <div className={css.container}>\n          <label className={css.formLabel}>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            className={css.formImput}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label className={css.formLabel}>Number</label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            className={css.formImput}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <button className={css.formBtn} type=\"submit\">\n            Add contact\n          </button>\n        </div>\n      </form>\n    );\n  } \n ","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { setFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n   \nexport const Filter = () => {\n \n    const dispatch = useDispatch();\n  \n    const onChange = ev => {\n      const filter = ev.target.value.toLowerCase();\n      dispatch(setFilter(filter));\n    };\n   \n    return (\n      <div className={css.filter}>\n        <h2>Contacts</h2>\n        <div className={css.contactsLabel}>Find contacts by name</div>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className={css.filterInput} \n          onChange={onChange}\n        />\n      </div>\n    );\n  }\n ","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactList_contacts__jDmyV\",\"contactsSingle\":\"ContactList_contactsSingle__JK5oU\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsInfo\":\"ContactList_contactsInfo__pWN4e\",\"contactsBtn\":\"ContactList_contactsBtn__yx6OU\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';  \nimport { selectContacts, selectFilterValue } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n  \nexport const ContactList = () => {\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const removeContact = id => {\n    dispatch(deleteContact(id));\n  };\n \n  return (\n    <div className={css.contacts}>\n      <ul className={css.contactsList}>\n        {filteredContacts.map(({ id, name, number }) => (\n          <li className={css.contactsSingle} key={id}>\n            <p className={css.contactsInfo}>{name}</p>\n            <p className={css.contactsInfo}> {number}</p>\n            <button\n              onClick={() => {\n                removeContact(id);\n              }}\n              className={css.contactsBtn}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n ","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; \nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter/>}\n      <ContactList />\n    </div>\n  );\n}; \n\nexport default App;"],"names":["selectContacts","state","contacts","selectFilterValue","filter","selectIsLoading","isLoading","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useSelector","dispatch","useDispatch","className","css","onSubmit","event","preventDefault","nameAlreadyOnList","form","target","number","value","name","toLowerCase","newContact","forEach","alert","reset","addNewContact","type","pattern","title","required","Filter","onChange","ev","setFilter","ContactList","filteredContacts","contact","includes","map","onClick","deleteContact","removeContact","useEffect","fetchContacts","Helmet"],"sourceRoot":""}